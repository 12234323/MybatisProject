<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace绑定对应的mapper接口-->
<mapper namespace="org.example.mapper.UserMapper">

    <resultMap id="map1" type="user">
        <!--其它相同的字段不用写-->
        <!--将实体类中password属性和数据库中pwd对应起来-->
        <result property="password" column="pwd"/>
    </resultMap>
    <select id="queryAll" resultMap="map1">
        select * from user;
    </select>

    <update id="updatePwd" parameterType="map">
        update user set pwd=#{password} where id=#{id};
    </update>

    <!--<select id="queryUserByLike" resultType="user">
        select * from user where name like "_"#{name}
    </select>-->

    <insert id="insertUser" parameterType="user">
        insert into user value (#{id},#{name},#{password})
    </insert>

    <select id="queryUserByLimit" parameterType="map" resultType="user">
        select * from user limit #{start},#{pagesize};
    </select>

    <!--sql实现代码的复用-->
    <sql id="if-title-id">
        <if test="id !=null">
            id=#{id}
        </if>
    </sql>

    <!--动态SQL，数据库字段和实体类字段不一致，可以起别名，也可以用resultMap-->
    <select id="queryAllByDynamicSql" resultType="user">
        select id,name,pwd as password from user
        <where>
            <!--通过SQL标签实现代码复用-->
            <include refid="if-title-id"/>
        </where>
    </select>

    <!--动态SQL，choose，when,otherwise-->
    <select id="queryAllByDynamicSql1" parameterType="map" resultType="user">
        select id,name,pwd as password from user
        <where>
            <choose>
                <!--只会执行一个when,当第一个符合后，后面的就不再判断-->
                <when test="id !=null">
                    id=#{id}
                </when>
                <!--注意多个when要用and-->
                <when test="name !=null">
                    and name=#{name}
                </when>
                <otherwise>
                    and  t_id=#{tId}
                </otherwise>
            </choose>
        </where>
    </select>
    

    <!--foreach-->
    <select id="queryAllByDynamicSql3" parameterType="list" resultType="user">
        select id,name,pwd password from user
        <where>
            <!--无论定义的list名字是什么，collection=list，否则报错-->
            <!--foreach-等效于(id1 or id2 or id3) separator分隔符 ，-->
            <!--当传入的是List或者数组时，mybatis会自动把它包装在一个map中，用名称作为键，
            List 实例将会以“list” 作为键,而数组实例将会以“array”作为键，因为我传的参数只有一个，
            而且传入的是一个List集合，所以mybatis会自动封装成Map<“list”,studentNameList>。
            在解析的时候会通过“list”作为Map的key值去寻找-->
            <foreach collection="list" item="id" open="(" close=")" separator="or">
                id=#{id}
            </foreach>
        </where>
    </select>

</mapper>